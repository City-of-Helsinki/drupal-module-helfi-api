<?php

/**
 * @file
 * Contains installation procedure for API base module.
 */

declare(strict_types = 1);

use Drupal\Core\Config\FileStorage;
use Drupal\rest\Entity\RestResourceConfig;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function helfi_api_base_install() : void {
  if (Drupal::moduleHandler()->moduleExists('filter')) {
    $formatters = Drupal::entityTypeManager()
      ->getStorage('filter_format')
      ->loadMultiple();

    /** @var \Drupal\filter\Entity\FilterFormat $format */
    foreach ($formatters as $format) {
      $format->setFilterConfig('helfi_link_converter', [
        'status' => 1,
      ])
        ->save();
    }
  }

  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolverInterface $envResolver */
  $envResolver = \Drupal::service('helfi_api_base.environment_resolver');

  try {
    // Only create the role if we have a valid project. This should
    // only be run for projects defined in environments.json
    // file.
    $envResolver->getActiveProject();

    // Make sure 'rest' module is enabled.
    if (!Drupal::moduleHandler()->moduleExists('rest')) {
      Drupal::service('module_installer')->install([
        'rest',
      ]);
    }

    // Install the debug rest config.
    helfi_api_base_install_debug_rest_config();

    // Create debug_api role.
    if (!$role = Role::load('debug_api')) {
      $role = Role::create(['label' => 'Debug API', 'id' => 'debug_api']);
    }

    // Grant the restful get helfi_debug_data permission.
    $role->grantPermission('restful get helfi_debug_data')
      ->save();
  }
  catch (\InvalidArgumentException) {
  }
}

/**
 * Install the debug rest config.
 */
function helfi_api_base_install_debug_rest_config() : void {
  /** @var \Drupal\Core\Extension\ExtensionPathResolver $extensionPathResolver */
  $extensionPathResolver = Drupal::service('extension.path.resolver');
  $config_path = $extensionPathResolver->getPath('module', 'helfi_api_base') . '/config/optional';
  $source = new FileStorage($config_path);
  $config_storage = Drupal::service('config.storage');

  // Install rest resource config.
  $config_name = 'rest.resource.helfi_debug_data';
  $config_storage->write($config_name, $source->read($config_name));
}

/**
 * Enable 'helfi_link_converter' filter format.
 */
function helfi_api_base_update_9001() : void {
  helfi_api_base_install();
}

/**
 * Install the debug rest config.
 */
function helfi_api_base_update_9002() : void {
  if (!Drupal::moduleHandler()->moduleExists('rest')) {
    return;
  }
  helfi_api_base_install_debug_rest_config();
}

/**
 * Install the package version rest config.
 */
function helfi_api_base_update_9003() : void {
  if (!Drupal::moduleHandler()->moduleExists('rest')) {
    return;
  }
  $config_path = Drupal::service('extension.list.module')
    ->getPath('helfi_api_base') . '/config/optional';
  $source = new FileStorage($config_path);
  $config_storage = Drupal::service('config.storage');

  $configs = [
    'rest.resource.helfi_debug_package_version',
  ];

  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }
}

/**
 * Disable syslog module and enable filelog.
 */
function helfi_api_base_update_9004() : void {
  Drupal::service('module_installer')->uninstall([
    'syslog',
  ]);
  Drupal::service('module_installer')->install([
    'filelog',
  ]);
}

/**
 * Disable filelog module, enable log_stdout module.
 */
function helfi_api_base_update_9005() : void {
  Drupal::service('module_installer')->uninstall([
    'filelog',
  ]);
}

/**
 * Re-run 9005 update.
 */
function helfi_api_base_9006() : void {
  helfi_api_base_update_9005();
}

/**
 * Enable health check.
 */
function helfi_api_base_update_9007() : void {
  if (!Drupal::moduleHandler()->moduleExists('health_check')) {
    Drupal::service('module_installer')->install([
      'health_check',
    ]);
  }
}

/**
 * Enable basic_auth authentication method for debug endpoints.
 */
function helfi_api_base_update_9009() : void {
  if (Drupal::moduleHandler()->moduleExists('rest')) {
    Drupal::service('module_installer')->install([
      'basic_auth',
    ]);

    $endpoints = RestResourceConfig::loadMultiple([
      'helfi_debug_data',
      'helfi_debug_package_version',
    ]);
    foreach ($endpoints as $endpoint) {
      $config = $endpoint->get('configuration');

      if (!in_array('basic_auth', $config['authentication'])) {
        $config['authentication'][] = 'basic_auth';
        $endpoint->set('configuration', $config);
        $endpoint->save();
      }
    }
  }
}

/**
 * Create 'debug_api' role for hel.fi projects.
 */
function helfi_api_base_update_9013() : void {
  helfi_api_base_install();
}

/**
 * Enable 'delete old revisions' feature.
 */
function helfi_api_base_update_9014() : void {
  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolverInterface $service */
  $service = \Drupal::service('helfi_api_base.environment_resolver');
  try {
    $service->getActiveProject();

    \Drupal::configFactory()->getEditable('helfi_api_base.delete_revisions')
      ->set('entity_types', [
        'node',
        'paragraph',
        'tpr_unit',
        'tpr_service',
        'tpr_errand_service',
      ])->save();
  }
  catch (\InvalidArgumentException) {
  }

}
