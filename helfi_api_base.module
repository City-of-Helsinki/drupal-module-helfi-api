<?php

/**
 * @file
 * Contains API base module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\helfi_api_base\Link\LinkProcessor;
use Drupal\user\UserInterface;

/**
 * Implements hook_element_info_alter().
 */
function helfi_api_base_element_info_alter(array &$info) : void {
  $info['link']['#pre_render'] = [
    [LinkProcessor::class, 'preRenderLink'],
  ];
}

/**
 * Implements hook_theme().
 */
function helfi_api_base_theme() : array {
  return [
    'helfi_link' => [
      'variables' => [
        'url' => NULL,
        'title' => NULL,
        'attributes' => [],
      ],
      'template' => 'helfi-link',
    ],
    'debug_item' => [
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'data' => [],
      ],
      'template' => 'debug-item',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_api_base_theme_suggestions_debug_item(array $variables) : array {
  $suggestions = [];
  $suggestions[] = 'debug_item__' . strtr($variables['id'], '.', '_');
  return $suggestions;
}

/**
 * Implements hook_mail_alter().
 */
function helfi_api_base_mail_alter(&$message) : void {
  // Prevent sending email if current site/environment is known to the resolver.
  // Only helfi-drupal sites are affected by this change.
  try {
    \Drupal::service('helfi_api_base.environment_resolver')
      ->getActiveEnvironment();
    $message['send'] = FALSE;
  }
  catch (\InvalidArgumentException) {
  }
}

/**
 * Implements hook_entity_update().
 */
function helfi_api_base_entity_update(EntityInterface $entity) : void {
  /** @var \Drupal\helfi_api_base\Entity\Revision\RevisionManager $revisionManager */
  $revisionManager = \Drupal::service('helfi_api_base.revision_manager');

  if (!$revisionManager->entityTypeIsSupported($entity->getEntityTypeId())) {
    return;
  }
  $revisions = $revisionManager->getRevisions($entity->getEntityTypeId(), $entity->id());

  // Queue entity revisions for deletion.
  if ($revisions) {
    $queue = \Drupal::queue('helfi_api_base_revision');
    $queue->createItem([
      'entity_id' => $entity->id(),
      'entity_type' => $entity->getEntityTypeId(),
    ]);
  }
}

/**
 * Implements hook_user_cancel_methods_alter().
 */
function helfi_api_base_user_cancel_methods_alter(array &$methods): void {
  /** @var \Drupal\Core\Session\AccountInterface $account */
  $account = \Drupal::currentUser();

  // Only allow user to disable user accounts if the user doesn't have
  // a permission to delete user accounts.
  $white_listed_methods = [
    'user_cancel_block',
    'user_cancel_block_unpublish',
  ];

  // Deny access to all non-whitelisted methods if user doesn't have
  // the 'delete user accounts' permission.
  if (!$account->hasPermission('delete user accounts')) {
    foreach ($methods as $name => &$method) {
      if (!in_array($name, $white_listed_methods)) {
        $method['access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function helfi_api_base_entity_operation(EntityInterface $entity): array {
  // Add sanitize user account -operation to user action list.
  $operations = [];

  /** @var \Drupal\user\UserInterface $current_user */
  $current_user = \Drupal::currentUser();
  if (
    $entity instanceof UserInterface &&
    $current_user->hasPermission('sanitize user accounts') &&
    $entity->isBlocked()
  ) {
    $operations['sanitize_user_entity'] = [
      'title' => t('Sanitize user account'),
      'url' => Url::fromRoute('helfi_api_base.user_sanitize', ['user' => $entity->id()]),
      'weight' => 50,
    ];
  }
  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_api_base_form_user_form_alter(array &$form, FormStateInterface &$form_state, $form_id): void {
  if ($form_id !== 'user_form') {
    return;
  }

  /** @var \Drupal\user\UserInterface $current_user */
  $current_user = \Drupal::currentUser();

  /** @var \Drupal\user\UserInterface $entity */
  $entity = \Drupal::routeMatch()->getParameter('user');

  // Add sanitize user account -operation to user actions if the current user
  // has the 'sanitize user accounts' permission and the user is blocked.
  if (
    $entity instanceof UserInterface &&
    $current_user->hasPermission('sanitize user accounts') &&
    $entity->isBlocked()
  ) {
    $destination = Url::fromRoute(
      'entity.user.canonical',
      ['user' => $entity->id()]
    )->toString();

    $form['actions']['sanitize'] = [
      '#attributes' => [
        'class' => [
          'button',
          'button--danger',
        ],
      ],
      '#button_type' => 'danger',
      '#title' => t('Sanitize account'),
      '#type' => 'link',
      '#url' => Url::fromRoute(
        'helfi_api_base.user_sanitize',
        ['user' => $entity->id()],
        ['query' => ['destination' => $destination]],
      ),
      '#weight' => 11,
    ];
  }
}
