<?php

/**
 * @file
 * Contains API base module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\helfi_api_base\Link\LinkProcessor;

/**
 * Implements hook_element_info_alter().
 */
function helfi_api_base_element_info_alter(array &$info) : void {
  $info['link']['#pre_render'] = [
    [LinkProcessor::class, 'preRenderLink'],
  ];
}

/**
 * Implements hook_theme().
 */
function helfi_api_base_theme() : array {
  return [
    'helfi_link' => [
      'variables' => [
        'url' => NULL,
        'title' => NULL,
        'attributes' => [],
      ],
      'template' => 'helfi-link',
    ],
    'debug_item' => [
      'variables' => [
        'id' => NULL,
        'label' => NULL,
        'data' => [],
      ],
      'template' => 'debug-item',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_api_base_theme_suggestions_debug_item(array $variables) : array {
  $suggestions = [];
  $suggestions[] = 'debug_item__' . strtr($variables['id'], '.', '_');
  return $suggestions;
}

/**
 * Implements hook_mail_alter().
 */
function helfi_api_base_mail_alter(&$message) : void {
  // Prevent sending email if current site/environment is known to the resolver.
  // Only helfi-drupal sites are affected by this change.
  try {
    \Drupal::service('helfi_api_base.environment_resolver')
      ->getActiveEnvironment();
    $message['send'] = FALSE;
  }
  catch (\InvalidArgumentException) {
  }
}

/**
 * Implements hook_entity_update().
 */
function helfi_api_base_entity_update(EntityInterface $entity) : void {
  /** @var \Drupal\helfi_api_base\Entity\Revision\RevisionManager $revisionManager */
  $revisionManager = \Drupal::service('helfi_api_base.revision_manager');

  if (!$revisionManager->entityTypeIsSupported($entity->getEntityTypeId())) {
    return;
  }
  $revisions = $revisionManager->getRevisions($entity->getEntityTypeId(), $entity->id());

  // Queue entity revisions for deletion.
  if ($revisions) {
    $queue = \Drupal::queue('helfi_api_base_revision');
    $queue->createItem([
      'entity_id' => $entity->id(),
      'entity_type' => $entity->getEntityTypeId(),
    ]);
  }
}
