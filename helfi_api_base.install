<?php

/**
 * @file
 * Contains installation procedure for API base module.
 */

declare(strict_types=1);

use Drupal\Core\Config\FileStorage;
use Drupal\helfi_api_base\Features\FeatureManager;
use Drupal\rest\Entity\RestResourceConfig;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function helfi_api_base_install(bool $is_syncing = FALSE) : void {
  if ($is_syncing) {
    return;
  }

  if (Drupal::moduleHandler()->moduleExists('filter')) {
    $formatters = Drupal::entityTypeManager()
      ->getStorage('filter_format')
      ->loadMultiple();

    /** @var \Drupal\filter\Entity\FilterFormat $format */
    foreach ($formatters as $format) {
      $format->setFilterConfig('helfi_link_converter', [
        'status' => 1,
      ])
        ->save();
    }
  }

  if (Drupal::moduleHandler()->moduleExists('raven')) {
    Drupal::configFactory()->getEditable('raven.settings')
      ->set('drush_error_handler', TRUE)
      ->set('request_tracing', TRUE)
      ->set('traces_sample_rate', 0.2)
      ->set('database_tracing', TRUE)
      ->set('twig_tracing', TRUE)
      ->save();
  }
}

/**
 * Enable 'helfi_link_converter' filter format.
 */
function helfi_api_base_update_9001() : void {
  helfi_api_base_install();
}

/**
 * Install the package version rest config.
 */
function helfi_api_base_update_9003() : void {
  if (!Drupal::moduleHandler()->moduleExists('rest')) {
    return;
  }
  $config_path = Drupal::service('extension.list.module')
    ->getPath('helfi_api_base') . '/config/optional';
  $source = new FileStorage($config_path);
  $config_storage = Drupal::service('config.storage');

  $configs = [
    'rest.resource.helfi_debug_package_version',
  ];

  foreach ($configs as $config) {
    $config_storage->write($config, $source->read($config));
  }
}

/**
 * Enable health check.
 */
function helfi_api_base_update_9007() : void {
  if (!Drupal::moduleHandler()->moduleExists('health_check')) {
    Drupal::service('module_installer')->install([
      'health_check',
    ]);
  }
}

/**
 * Enable basic_auth authentication method for debug endpoints.
 */
function helfi_api_base_update_9009() : void {
  if (Drupal::moduleHandler()->moduleExists('rest')) {
    Drupal::service('module_installer')->install([
      'basic_auth',
    ]);

    $endpoints = RestResourceConfig::loadMultiple([
      'helfi_debug_package_version',
    ]);
    foreach ($endpoints as $endpoint) {
      $config = $endpoint->get('configuration');

      if (!in_array('basic_auth', $config['authentication'])) {
        $config['authentication'][] = 'basic_auth';
        $endpoint->set('configuration', $config);
        $endpoint->save();
      }
    }
  }
}

/**
 * Create 'debug_api' role for hel.fi projects.
 */
function helfi_api_base_update_9013() : void {
  helfi_api_base_install();
}

/**
 * Enable 'delete old revisions' feature.
 */
function helfi_api_base_update_9014() : void {
  \Drupal::configFactory()->getEditable('helfi_api_base.delete_revisions')
    ->set('entity_types', [
      'node',
      'paragraph',
      'tpr_unit',
      'tpr_service',
      'tpr_errand_service',
    ])->save();
}

/**
 * Enable needed features.
 */
function helfi_api_base_update_9015() : void {
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $service */
  $service = \Drupal::service(FeatureManager::class);
  $service->enableFeature(FeatureManager::DISABLE_USER_PASSWORD);
}

/**
 * Install raven module.
 */
function helfi_api_base_update_9016() : void {
  Drupal::service('module_installer')->install([
    'raven',
  ]);
  Drupal::configFactory()->getEditable('raven.settings')
    ->set('drush_error_handler', TRUE)
    ->set('request_tracing', TRUE)
    ->set('traces_sample_rate', 0.2)
    ->set('database_tracing', TRUE)
    ->set('twig_tracing', TRUE)
    ->save();
}

/**
 * Enable 'monolog' module.
 */
function helfi_api_base_update_9017(): void {
  Drupal::service('module_installer')->install([
    'monolog',
  ]);
}

/**
 * Enable user expire feature.
 */
function helfi_api_base_update_9018(): void {
  /** @var \Drupal\helfi_api_base\Features\FeatureManager $service */
  $service = \Drupal::service(FeatureManager::class);
  $service->enableFeature(FeatureManager::USER_EXPIRE);
}

/**
 * Remove debug_api role and debug api functionality.
 */
function helfi_api_base_update_9019(): void {
  if ($account = user_load_by_name('helfi-debug-data')) {
    $account->delete();
  }

  if ($role = Role::load('debug_api')) {
    $role->delete();
  }
  // Delete rest endpoint configuration.
  \Drupal::configFactory()->getEditable('rest.resource.helfi_debug_data')
    ->delete();
}
